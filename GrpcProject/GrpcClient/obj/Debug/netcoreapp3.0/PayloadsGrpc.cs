// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/payloads.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcServer {
  public static partial class PayloadService
  {
    static readonly string __ServiceName = "PayloadService";

    static readonly grpc::Marshaller<global::GrpcServer.PayloadId> __Marshaller_PayloadId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcServer.PayloadId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcServer.SmallPayload> __Marshaller_SmallPayload = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcServer.SmallPayload.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcServer.MediumPayload> __Marshaller_MediumPayload = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcServer.MediumPayload.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcServer.LargePayload> __Marshaller_LargePayload = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcServer.LargePayload.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcServer.HugePayload> __Marshaller_HugePayload = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcServer.HugePayload.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcServer.EnormousPayload> __Marshaller_EnormousPayload = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcServer.EnormousPayload.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcServer.EmptyRequest> __Marshaller_EmptyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcServer.EmptyRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcServer.PayloadId, global::GrpcServer.SmallPayload> __Method_GetSmallPayload = new grpc::Method<global::GrpcServer.PayloadId, global::GrpcServer.SmallPayload>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSmallPayload",
        __Marshaller_PayloadId,
        __Marshaller_SmallPayload);

    static readonly grpc::Method<global::GrpcServer.PayloadId, global::GrpcServer.MediumPayload> __Method_GetMediumPayload = new grpc::Method<global::GrpcServer.PayloadId, global::GrpcServer.MediumPayload>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMediumPayload",
        __Marshaller_PayloadId,
        __Marshaller_MediumPayload);

    static readonly grpc::Method<global::GrpcServer.PayloadId, global::GrpcServer.LargePayload> __Method_GetLargePayload = new grpc::Method<global::GrpcServer.PayloadId, global::GrpcServer.LargePayload>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLargePayload",
        __Marshaller_PayloadId,
        __Marshaller_LargePayload);

    static readonly grpc::Method<global::GrpcServer.PayloadId, global::GrpcServer.HugePayload> __Method_GetHugePayload = new grpc::Method<global::GrpcServer.PayloadId, global::GrpcServer.HugePayload>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHugePayload",
        __Marshaller_PayloadId,
        __Marshaller_HugePayload);

    static readonly grpc::Method<global::GrpcServer.PayloadId, global::GrpcServer.EnormousPayload> __Method_GetEnormousPayload = new grpc::Method<global::GrpcServer.PayloadId, global::GrpcServer.EnormousPayload>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEnormousPayload",
        __Marshaller_PayloadId,
        __Marshaller_EnormousPayload);

    static readonly grpc::Method<global::GrpcServer.EmptyRequest, global::GrpcServer.SmallPayload> __Method_GetAllSmallPayloads = new grpc::Method<global::GrpcServer.EmptyRequest, global::GrpcServer.SmallPayload>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllSmallPayloads",
        __Marshaller_EmptyRequest,
        __Marshaller_SmallPayload);

    static readonly grpc::Method<global::GrpcServer.EmptyRequest, global::GrpcServer.MediumPayload> __Method_GetAllMediumPayloads = new grpc::Method<global::GrpcServer.EmptyRequest, global::GrpcServer.MediumPayload>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllMediumPayloads",
        __Marshaller_EmptyRequest,
        __Marshaller_MediumPayload);

    static readonly grpc::Method<global::GrpcServer.EmptyRequest, global::GrpcServer.LargePayload> __Method_GetAllLargePayloads = new grpc::Method<global::GrpcServer.EmptyRequest, global::GrpcServer.LargePayload>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllLargePayloads",
        __Marshaller_EmptyRequest,
        __Marshaller_LargePayload);

    static readonly grpc::Method<global::GrpcServer.EmptyRequest, global::GrpcServer.HugePayload> __Method_GetAllHugePayloads = new grpc::Method<global::GrpcServer.EmptyRequest, global::GrpcServer.HugePayload>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllHugePayloads",
        __Marshaller_EmptyRequest,
        __Marshaller_HugePayload);

    static readonly grpc::Method<global::GrpcServer.EmptyRequest, global::GrpcServer.EnormousPayload> __Method_GetAllEnormousPayloads = new grpc::Method<global::GrpcServer.EmptyRequest, global::GrpcServer.EnormousPayload>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllEnormousPayloads",
        __Marshaller_EmptyRequest,
        __Marshaller_EnormousPayload);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcServer.PayloadsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for PayloadService</summary>
    public partial class PayloadServiceClient : grpc::ClientBase<PayloadServiceClient>
    {
      /// <summary>Creates a new client for PayloadService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PayloadServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PayloadService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PayloadServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PayloadServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PayloadServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::GrpcServer.SmallPayload GetSmallPayload(global::GrpcServer.PayloadId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSmallPayload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcServer.SmallPayload GetSmallPayload(global::GrpcServer.PayloadId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSmallPayload, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.SmallPayload> GetSmallPayloadAsync(global::GrpcServer.PayloadId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSmallPayloadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.SmallPayload> GetSmallPayloadAsync(global::GrpcServer.PayloadId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSmallPayload, null, options, request);
      }
      public virtual global::GrpcServer.MediumPayload GetMediumPayload(global::GrpcServer.PayloadId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMediumPayload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcServer.MediumPayload GetMediumPayload(global::GrpcServer.PayloadId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMediumPayload, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.MediumPayload> GetMediumPayloadAsync(global::GrpcServer.PayloadId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMediumPayloadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.MediumPayload> GetMediumPayloadAsync(global::GrpcServer.PayloadId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMediumPayload, null, options, request);
      }
      public virtual global::GrpcServer.LargePayload GetLargePayload(global::GrpcServer.PayloadId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLargePayload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcServer.LargePayload GetLargePayload(global::GrpcServer.PayloadId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLargePayload, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.LargePayload> GetLargePayloadAsync(global::GrpcServer.PayloadId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLargePayloadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.LargePayload> GetLargePayloadAsync(global::GrpcServer.PayloadId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLargePayload, null, options, request);
      }
      public virtual global::GrpcServer.HugePayload GetHugePayload(global::GrpcServer.PayloadId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHugePayload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcServer.HugePayload GetHugePayload(global::GrpcServer.PayloadId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHugePayload, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.HugePayload> GetHugePayloadAsync(global::GrpcServer.PayloadId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHugePayloadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.HugePayload> GetHugePayloadAsync(global::GrpcServer.PayloadId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHugePayload, null, options, request);
      }
      public virtual global::GrpcServer.EnormousPayload GetEnormousPayload(global::GrpcServer.PayloadId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEnormousPayload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcServer.EnormousPayload GetEnormousPayload(global::GrpcServer.PayloadId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEnormousPayload, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.EnormousPayload> GetEnormousPayloadAsync(global::GrpcServer.PayloadId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEnormousPayloadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcServer.EnormousPayload> GetEnormousPayloadAsync(global::GrpcServer.PayloadId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEnormousPayload, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcServer.SmallPayload> GetAllSmallPayloads(global::GrpcServer.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllSmallPayloads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcServer.SmallPayload> GetAllSmallPayloads(global::GrpcServer.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAllSmallPayloads, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcServer.MediumPayload> GetAllMediumPayloads(global::GrpcServer.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllMediumPayloads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcServer.MediumPayload> GetAllMediumPayloads(global::GrpcServer.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAllMediumPayloads, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcServer.LargePayload> GetAllLargePayloads(global::GrpcServer.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllLargePayloads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcServer.LargePayload> GetAllLargePayloads(global::GrpcServer.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAllLargePayloads, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcServer.HugePayload> GetAllHugePayloads(global::GrpcServer.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllHugePayloads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcServer.HugePayload> GetAllHugePayloads(global::GrpcServer.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAllHugePayloads, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcServer.EnormousPayload> GetAllEnormousPayloads(global::GrpcServer.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllEnormousPayloads(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::GrpcServer.EnormousPayload> GetAllEnormousPayloads(global::GrpcServer.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAllEnormousPayloads, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PayloadServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PayloadServiceClient(configuration);
      }
    }

  }
}
#endregion
